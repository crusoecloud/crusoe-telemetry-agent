apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-reloader-scripts
  namespace: crusoe-system
data:
  entrypoint.py: |
    #!/usr/bin/env python3
    import os, time, yaml
    from kubernetes import client, config

    BASE_CONFIG = "/etc/vector-base/vector.yaml"   # from ConfigMap crusoe-telemetry-agent
    VECTOR_CONFIG_PATH = "/etc/vector/vector.yaml"

    def discover_endpoints(v1, node_name):
        endpoints = []
        # 1. dcgm-exporter pods on this node
        dcgm_pods = v1.list_namespaced_pod(
            namespace="nvidia-gpu-operator",
            label_selector="app=nvidia-dcgm-exporter",
            field_selector=f"spec.nodeName={node_name},status.phase=Running"
        ).items
        for pod in dcgm_pods:
            if pod.status.pod_ip:
                endpoints.append(f"http://{pod.status.pod_ip}:9400/metrics")

        # 2. annotated pods
        pods = v1.list_pod_for_all_namespaces(
            field_selector=f"spec.nodeName={node_name},status.phase=Running"
        ).items
        for pod in pods:
            ann = pod.metadata.annotations or {}
            if ann.get("vector.scrape", "false").lower() == "true":
                pod_ip = pod.status.pod_ip
                scrape_port = ann.get("vector.scrape/port", "9100")
                scrape_path = ann.get("vector.scrape/path", "/metrics")
                scheme = ann.get("vector.scrape/scheme", "http")
                if pod_ip:
                    endpoints.append(f"{scheme}://{pod_ip}:{scrape_port}{scrape_path}")
        return endpoints

    def merge_config(base_cfg, endpoints):
        cfg = dict(base_cfg)
        if endpoints:
            cfg.setdefault("sources", {})["dynamic_scrapes"] = {
                "type": "prometheus_scrape",
                "endpoints": endpoints,
                "scrape_interval_secs": 30,
            }
            if "transforms" in cfg and "add_update_labels" in cfg["transforms"]:
                inputs = cfg["transforms"]["add_update_labels"].get("inputs", [])
                if "dynamic_scrapes" not in inputs:
                    inputs.append("dynamic_scrapes")
                cfg["transforms"]["add_update_labels"]["inputs"] = inputs
        return cfg

    def main():
        config.load_incluster_config()
        v1 = client.CoreV1Api()
        node_name = os.environ.get("NODE_NAME")
        if not node_name:
            raise RuntimeError("NODE_NAME not set")

        while True:
            with open(BASE_CONFIG) as f:
                base_cfg = yaml.safe_load(f)
            endpoints = discover_endpoints(v1, node_name)
            final_cfg = merge_config(base_cfg, endpoints)
            with open(VECTOR_CONFIG_PATH, "w") as f:
                yaml.dump(final_cfg, f)
            time.sleep(300)

    if __name__ == "__main__":
        main()
